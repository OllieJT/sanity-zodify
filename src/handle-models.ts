import type { Schema } from 'sanity';

type SanitySchema = Schema.TypeDefinition | Schema.IntrinsicTypeDefinition;

const withReference = `z.object({ _type: z.literal('reference'), _ref: z.string() })`;

function boolean(_schema: Schema.BooleanDefinition): string {
	return `z.boolean()`;
}
function date(_schema: Schema.DateDefinition): string {
	return `z.string().transform((v) => (v?.length ? new Date(v) : undefined))`;
}
function datetime(_schema: Schema.DatetimeDefinition): string {
	return `z.string().transform((v) => (v?.length ? new Date(v) : undefined))`;
}
function number(_schema: Schema.NumberDefinition): string {
	return `z.number()`;
}
function string(_schema: Schema.StringDefinition): string {
	return `z.string()`;
}
function text(_schema: Schema.TextDefinition): string {
	return `z.string()`;
}
function url(_schema: Schema.UrlDefinition): string {
	return `z.string().url().transform((value) => new URL(value))`;
}
function reference(_schema: Schema.ReferenceDefinition): string {
	return withReference;
}
function slug(_schema: Schema.SlugDefinition): string {
	return `z.object({ _type: z.literal('slug'), current: z.string() })`;
}
function geopoint(_schema: Schema.GeopointDefinition): string {
	return `z.object({_type: z.literal('geopoint'),alt: z.number(),lat: z.number(),lng: z.number()})`;
}
function image(_schema: Schema.ImageDefinition): string {
	return `z.object({ _type: z.literal('image'), asset: ${withReference} })`;
}
function file(_schema: Schema.FileDefinition): string {
	return `z.object({ _type: z.literal('file'), asset: ${withReference} })`;
}
function block(_schema: Schema.BlockDefinition): string {
	return `z.array(z.any())`;
}

function array(schema: Schema.ArrayDefinition, schemas: SanitySchema[]): string {
	const items = schema.of.map((subSchema) => {
		const subModel = schemaToModel(subSchema as SanitySchema, schemas);
		return subModel;
	}, [] as string[]);

	const value = items.length > 1 ? `z.union([\n\t${items.join(',\n\t')}\n])` : items[0];

	return `z.array(${value})`;
}
function object(
	schema: Schema.ObjectDefinition | Schema.DocumentDefinition,
	schemas: SanitySchema[],
): string {
	const items = schema.fields.map((subSchema) => {
		const subModel = schemaToModel(subSchema as SanitySchema, schemas);
		return `${subSchema.name}: ${subModel}`;
	});

	const fields = items.join(',\n\t');

	if (schema.type === 'document') {
		return `z.object({\n\t_id: z.string(),\n\t_rev: z.string(),\n\t_type: z.string(),\n\t_createdAt: Datetime,\n\t_updatedAt: Datetime\n}).extend({\n\t${fields}\n})`;
	} else return `z.object({\n\t${fields}\n})`;
}

export function schemaToModel(schema: SanitySchema, schemas: SanitySchema[]): string {
	if (schema.type === 'boolean') return boolean(schema as Schema.BooleanDefinition);
	else if (schema.type === 'date') return date(schema as Schema.DateDefinition);
	else if (schema.type === 'datetime') return datetime(schema as Schema.DatetimeDefinition);
	else if (schema.type === 'number') return number(schema as Schema.NumberDefinition);
	else if (schema.type === 'string') return string(schema as Schema.StringDefinition);
	else if (schema.type === 'text') return text(schema as Schema.TextDefinition);
	else if (schema.type === 'url') return url(schema as Schema.UrlDefinition);
	else if (schema.type === 'reference') return reference(schema as Schema.ReferenceDefinition);
	else if (schema.type === 'document')
		return object(schema as Schema.DocumentDefinition, schemas);
	else if (schema.type === 'slug') return slug(schema as Schema.SlugDefinition);
	else if (schema.type === 'geopoint') return geopoint(schema as Schema.GeopointDefinition);
	else if (schema.type === 'image') return image(schema as Schema.ImageDefinition);
	else if (schema.type === 'file') return file(schema as Schema.FileDefinition);
	else if (schema.type === 'array') return array(schema as Schema.ArrayDefinition, schemas);
	else if (schema.type === 'object') return object(schema as Schema.ObjectDefinition, schemas);
	else if (schema.type === 'block') return block(schema as Schema.BlockDefinition);
	else {
		const customSchema = schemas.find((s) => s.name === schema.type);
		if (customSchema) return schemaToModel(customSchema, schemas);
		else return 'z.any().describe("⛔️ This schema type is not being generated by Zodity")';
		// throw new Error(`⛔️ Zodify does not yet support model generation for ${schema.type} schemas`,);
	}
}
